// Generated by CoffeeScript 1.10.0
(function() {
  var base, compile, compileIt, executeFile, expect, fs, getDefaultExtension, overrideContext, path, ref, walkFolder;

  expect = require('chai').expect;

  fs = require('fs');

  path = require('path');

  compile = require('sleet').compile;

  ref = require('../lib/sleet-handlebars'), getDefaultExtension = ref.getDefaultExtension, overrideContext = ref.overrideContext;

  base = path.resolve('test');

  walkFolder = function(folder) {
    var folderPath, name;
    folderPath = path.resolve(folder);
    name = path.relative(base, folderPath);
    return describe(name, function() {
      var file, filepath, i, len, ref1, results;
      ref1 = fs.readdirSync(folderPath);
      results = [];
      for (i = 0, len = ref1.length; i < len; i++) {
        file = ref1[i];
        filepath = path.join(folderPath, file);
        if (fs.statSync(filepath).isDirectory()) {
          results.push(walkFolder(filepath));
        } else if (path.extname(file) === '.sleet') {
          results.push(executeFile(folderPath, file));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
  };

  executeFile = function(dir, file) {
    var expectedName, name;
    name = path.basename(file, path.extname(file));
    expectedName = name + "-expected.html";
    return it("Compile result of [" + file + "] should equals to the content of [" + expectedName + "]", function() {
      var compiled, expected;
      compiled = compileIt(path.join(dir, file));
      expected = fs.readFileSync(path.join(dir, expectedName), 'utf8').trim();
      return expect(compiled.content).to.equal(expected);
    });
  };

  compileIt = function(input) {
    var content;
    content = fs.readFileSync(input, 'utf8');
    return compile(content, {
      filename: input,
      handlebars: {
        getDefaultExtension: getDefaultExtension,
        overrideContext: overrideContext
      }
    });
  };

  describe('Expected Result', function() {
    return walkFolder('./test/expected');
  });

}).call(this);
